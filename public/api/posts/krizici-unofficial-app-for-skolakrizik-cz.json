{
  "createdAt": "2020-08",
  "title": "Křižíci - Unofficial app for skolakrizik.cz",
  "description": "New Křižíci app - fresh, cool and rewritten in Kotlin and NetCore as microservices",
  "content": "![logo](/images/posts/krizici-unofficial-app-for-skolakrizik-cz/logo.png)\n\n# Křižíci - Unofficial app for skolakrizik.cz\n\n## Background\n\nThis is the next version of the \"Křižíci - Unofficial app for vosaspsekrizik.cz\". A few years later, the school rebuild everything - shoutout to [Michal Dudek](https://www.michaldudek.it/). With a completely new website and a new system of class substitutions the old app was partially obsolete and having with few extra years of experience, I decided to rewrite the app from scratch. \n\n## Development\n\n### Server - [source code](https://github.com/antoninkriz/Krizici-Server-ASPNetCore)\n\nFirst, I rewrote the server. Since I already had a lot of experience with NetCore, I decided to go with it. One of the requirements from the school was Google login - data may not be publicly exposed to non-students thanks to GDPR. Also, all data moved to shared Team Drive (Google Drive for groups), so I had to implement [the Google Drive API](https://developers.google.com/drive/). To make everything automated, I decided to parse text from PDFs using [iText 7](https://itextpdf.com/) - AGPL library for working with PDFs (which may seem pretty ugly, but the general structure of PDFs never changed and was one of few things that were surprisingly constant throughout this project and which I could count on). Now getting lists of classes, teachers and classrooms was pretty easy - no more hardcoding. To get PNGs out of the PDFs, I went again with ImageMagick, but this time as a library for NetCore. Everything was also memory-cached to make responses even faster. To make everything \"fresh, cool, and in\" I decided not to write a monolithic application, so microservices over [RabbitMq](https://www.rabbitmq.com) was an obvious choice. The result was three microservices: API, Data and Auth. The content was still updated using crontab, but this time by sending a request using curl to the server.\n\n### App -  [source code](https://github.com/antoninkriz/Krizici-App-Kotlin)\n\nThis time I used [Kotlin](https://kotlinlang.org), wrote cleaner, properly async code. Aside redesign which gave users an option to view timetables for not only their classes but also classrooms and teachers. Since the school finally made a brand new system for substitutions, displaying them was just a web view of the actual website. Also, as requested, Google Login was implemented. The result was a more stable and cleaner application with friendlier UI.\n\n## Technologies\n\n- Android\n  - [Kotlin](https://kotlinlang.org) - nothing more to say\n- Server\n  - [Nginx](https://nginx.org/en/) - as an HTTP proxy for NetCore WebAPI server\n  - [NetCore](https://dotnet.microsoft.com/) WebAPI - The framework everything was written in\n  - [RabbitMq](https://www.rabbitmq.com) - Message queue for all microservices\n  - [iText 7](https://itextpdf.com/), [ImageMagick](https://imagemagick.org), ...\n\n## Screenshots\n\n![](/images/posts/krizici-unofficial-app-for-skolakrizik-cz/1.jpg)\n![](/images/posts/krizici-unofficial-app-for-skolakrizik-cz/2.jpg)\n![](/images/posts/krizici-unofficial-app-for-skolakrizik-cz/3.jpg)\n![](/images/posts/krizici-unofficial-app-for-skolakrizik-cz/4.jpg)\n![](/images/posts/krizici-unofficial-app-for-skolakrizik-cz/5.jpg)\n\n## What would I do differently\n\nAside from checking if files differ before converting them, which was a pretty expensive task, I'm also pretty sure I can write much cleaner and better code now, but in general, I'm pretty happy with the result."
}