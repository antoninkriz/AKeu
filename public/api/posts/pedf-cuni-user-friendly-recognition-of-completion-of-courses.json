{
  "createdAt": "2020-08",
  "title": "PedF CUNI - User-friendly Recognition of Completion of Courses",
  "description": "Seminary work written as microservices in NetCore, Angular and deployed using Docker",
  "content": "![logo](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/logo.png)\n\n# Background\n\nIn the last year of high school, every student has to build a website, a seminary work, an application according to some chosen assignment - and I randomly picked this one. The assignment was to build a web application with the following functions:\n- Login and registration for users\n- Use publicly available data from the Faculty of education at Charles University\n- Let the user search and pick only classes/subject that can be picked for his field and department\n- Fill the data into the official PDF form and make it printer-friendly\nWhile having the option to write everything in PHP and be done in 3 hours, I decided to make this work \"portfolio friendly\". I already have some experience with React, but I wanted to try something new, so I chose Angular. Combined with smooth SPA project generation (Angular + WebApi) and some previous experience, NetCore was my choice for the back-end.\n\n# Development - [source code](https://github.com/antoninkriz/KrizikPedFUznaniPredmetu)\n\n## Structure\n\nWhole project can be divided into following parts:\n- **Back-end**\n  - *KarolinkaUznani.Api* - Api containing only controllers and connection to RabbitMQ\n  - *KarolinkaUznani.Services* - Services themselves\n    - ... *.Auth* - Everything related to users - sign up, login, ...\n    - ... *.Data* - Fetching data related to Karolinka only from the database\n- **Front-end**\n  - KarolinkaUznani.Api/*[ClientApp](https://github.com/antoninkriz/KrizikPedFUznaniPredmetu-ClientApp)* - Whole front-end client with styles and everything around\n- **Database**\n  - *Database/\\*.sql* - SQL scripts to create and seed the database from\n  - *KarolinkaUznani.Database* - contains only stored procedures\n- **Tools**\n  - *DockerDeploy* - script for one-click deployment of the whole project\n  - *KarolinkaToSQL* - script parsing Karolinka into one huge SQL insert\n\n## Front-End\n\nThere isn't much to say, the development was (obviously) very similar to React. The only thing I would like to mention which I'm proud of is one ugly workaround. The form that has to be filled with the final data is an Excel spreadsheet with some custom-ish styling. It's huge and spending hours making it look same, but as a responsive table in HTML would be painful, so I tried multiple ways of converting such file into HTML. Some results were awful, some were better, but none of them was good enough - most of the time, thanks to the inability to scale properly for printing. Then someone very bright (I think it was me) had a great idea of converting it to SVG. That thankfully worked great and with some CSS scaled perfectly.\n\n## Server\n\nTo make everything fresh and cool I wanted to meet these requirements for no real reason (remember, this is 3 hours project in PHP and some JavaScript):\n- Microservices\n- Docker\n- Deploy script\nHaving already one project built with NetCore and microservices around RabbitMq the start was pretty easy, then I designed the database - MySQL - and implemented it - wrote some SQL procedures.\n\n## Tools\n\nWhile developing this project, I created a few tools:\n- KarolinkaToSQL - scrapper and parser for Karolinka, one huge ugly-ish Python script\n- DockerDeploy - shell script that builds the whole project, deploy it in docker and fill the database with new data\n\nNone of them is really fancy, but to this point, they work ~~perfectly~~ good enough.\n\n# Technologies\n\n## General\n\n- *Docker* - for simple project deployment across other systems\n- *RabbitMQ* - messaging queue for communication between API and Services\n- *MySQL* - platform on which is the whole database based around\n\n**[Docker](https://github.com/docker/compose)**\nA great tool to eliminate \"it works on my machine\" phrase. Simple to setup with docker-compose and sounds great as a buzzword.\n**[RabbitMQ](https://github.com/rabbitmq)**\nSince RabbitMQ is the most used solution of its type, combined with [RawRabbit](https://github.com/pardahlman/RawRabbit) (.Net framework for communication with RabbitMQ server) and since it's also used at my workplace, the choice was simple.\n**[MySQL](https://github.com/mysql)**\nTo make everything sound even cooler my first choice was MongoDB, but since the relational database is a better choice for this project, I stuck to MySQL which I already have more experience with. However, the whole structure of this project takes in mind possible usage of other types of databases.\n\n## Back-End\n\n- *C# DotNet Core* - framework the whole project is based on\n**[C# DotNet Core](https://github.com/Microsoft/dotnet)**\nWith my love for modern C#, its usage at my workplace, simple one-click creation of SPA (Single Page Application) web project and an already solid amount of experience, the choice was simple.\n\n## Front-End\n\n- *Angular 7* - front-end TypeScript based web framework\n- *SCSS* - CSS extension language\n\n**[Angular 7](https://github.com/angular/angular)**\nWith already some experience with React, I wanted to try something new, its also used at my workplace and with its popularity in other job listings, it was a simple choice over VueJS. [TypeScript](https://github.com/Microsoft/TypeScript)s \n**[SCSS](https://github.com/sass])**\nPure CSS makes me ~~sucidal~~ unhappy to work with, especially on bigger projects, so [LESS](https://github.com/less) or SCSS was an obvious choice. For my purposes, both would do the job just fine, but SCSS was easier for me to integrate with Angular.\n\n## Tools\n\n**[Python 3](https://github.com/python/)**\nWith a solid amount of libraries, Python was the perfect choice for something like a script parsing HTML from a website.\n\n# Screenshots\n\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/1.png)\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/2.png)\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/3.png)\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/4.png)\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/5.png)\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/6.png)\n![](/images/posts/pedf-cuni-user-friendly-recognition-of-completion-of-courses/7.png)\n\n# What would I do differently\n\nThe microservices design isn't ideal (as before) - Remote Procedure Call isn't the smartest way, maybe I bodged some things too much (KarolinkaToSQL is truly ugly), but in the end, I'm pretty happy with the result.\n\n# Installation and requirements\n\n## Rquirements:\n\n- *Debian*\n  - tested on Linux Mint 18.04 but should work on any common distro\n- *DotNet Core SDK*\n  - rested with version 2.2.0\n- *Docker*\n  - tested with version 18.09.4\n- *Python 3*\n  - with following libraries: `uuid`, `urllib`, `lxml`\n- *MySQL client*\n  - testesd with version 14.14\n- Networking:\n  - `api.local` redirected to `127.0.0.1` (testeds using `hosts` file)\n  - Ports:\n    - Web: `8080` - application itself, `5000, 5050, 5051` - running api and services\n    - RabbitMQ: `5672` - messaging queue itself, `15672` - RabbitMQ management\n    - Database: `30006` - MySQL database port\n\n## Installation\n\n```bash\n# requirements already satisfied\ngit clone https://github.com/antoninkriz/KrizikPedFUznaniPredmetu.git\ncd KrizikPedfUznaniPredmetu/Tools/DockerDeploy\nsudo ./netcore-publish.sh\n```"
}