{
  "createdAt": "2020-08",
  "title": "CTU TimeTable Generator",
  "description": "Small CLI tool written in C++ to generate the best possible time table",
  "content": "![logo](/images/posts/ctu-timetable-generator/logo.png)\n\n# Background\n\nBuilding a good time table is hard. Actually NP hard. Doing such thing by hand is ugly and takes a lot of time. So does writing C++, but hey, that's at least somthing.  \nWhen my first semester at [FIT CTU](https://fit.cvut.cz) ended I finished it with pretty decent grades, so I had the option to choose my time table in the first wave. To make sure I get all classes I wanted before they fill up (and in case they did) I needed a quick way of building a time table on spot.\n\n# Development - [source code](https://github.com/antoninkriz/CTU-TimeTableGenerator)\n\nGenerating all possible time tables is not *hard*. You just need to iterate recursively through all possible combinations of all classes.  \nBut determining which time tables are better than others is harder. \nI had following requirements:\n\n- no classes starting at 7:30 AM\n- no classes starting at 9:15 AM when possible\n- spend less time in school in total\n  - monolithic blocks of classes without time in between are better\n- keep all school days together\n  - Monday + Tuesday + Wednesday is better than Thursday instead of Tuesday and so on\n- single lecture and nothing else doesn't matter, I can skip these easily\n- more lectures but nothing else doesn't really hurt too, but it's not preffered\n\nWith these requirements I was able to build a scoring algorithm.  \nNow I jsut had to generate all time tables, give a score to each one of them and print the best ones.\n\nWell, in Python the app run for 20 minutes, although successfuly it took around 12 GB or RAM. Well, it works, but not really as I've imaginend.\nSadly, the algoritm itself can not be much faster, but using a \"faster\" language with references, like C++, can.  \nAfter rewriting it in C++ the code runs for ~15 seconds. This is (probably and not only) because I don't need to make that many deep copies of many objects and with the option to easily share instances of objects the RAM usage dropped to nice 4 GB.  Although still not optimal this result was someting I was looking for.\n\n# Technologies\n\nThere isn't really much to say about the Python implementation. I used purely standard library for better readability I've decided not to use many, if any, oneliners like list comprehentions and so on.\n\nIn the CPP version I used the [json.hpp](https://github.com/nlohmann/json) library to parse list of classes from FIT CTU time table API and to keep C++'s verbosity on sane levels I've decided to stick with `auto` (I know, not recommended), `for in` loops and other cool stuf we have in C++17.\n\n# Screenshots\n\n![](/images/posts/ctu-timetable-generator/1.jpg)\n![](/images/posts/ctu-timetable-generator/2.jpg)\n\n# Installation and usage\n\n**1)**\nSpoof HTTP requests to `https://timetable.fit.cvut.cz/new/api/sirius/courses/CLASS_NAME/events?...` from [timetable.fit.cvut.cz](https://timetable.fit.cvut.cz/new/) Using Chrome Dev tools and copy paste them to the `rozvrh.json` file following this structure:\n\n```json\n{\n    \"FI-KSA\": {\"events\":[...]},\n    \"BI-LIN\": <copy pasted response from timetables>,\n    ...\n}\n```\n\n**2)**\nCompile with `g++ -O3 --std=c++17 main.cpp`\n\n**3)**\nPipe the input file to stdin of the program using `cat rozvrh.json | ./a.out`."
}