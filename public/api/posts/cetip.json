{
  "createdAt": "2020-08",
  "title": "Cetip Network",
  "description": "A website for a CETIP - a collaborative social sciences research network",
  "content": "![logo](/images/posts/cetip/logo.png)\n\n# Background\n\nI was asked to build a website for the [Cetip Network](https://www.cetip-network.eu/), a social sciences research network. Their old web was a broken WordPress site that was even hacked a few times, so the only requirement was not to use WordPress, and I've had complete freedom with the choice of technologies used.\n\n# Development\n\nThe old website had many pages with a little or no content, which was something I wanted to change. So, in the beginning, I redesigned designed the website's structure. I decided to merge pages \"People\", \"Visiting Scholars\" and \"Our partners\" into a single page \"Who we are\" and pages \"About us\", \"Research\", \"Our mission\", \"Annual reports\" and media became just \"About us\". On the other hand, there were pages \"Projects\" and \"People\", which was just an endless wall of text with incorrectly sized logos and photos, and a very much broken page \"Education\" with supposedly password-protected downloadable content.\nTo fix all these problems and to make the site more versatile, I decided to go with the attitude that *everything is an article*.  \nI decided to use categories (or post types if you want) to differentiate between all these posts - *Projects*, *Annual events*, *Education/Protected* and *None*.\n\n**None** is a category for regular articles with no special effect,  \n**Project** is an article with extra fields for the duration of a project,  \n**Annual event** is a special version of *None*, but visible only in its special category,  \n**Education** is a password protected article shown only in the *Education* containing links a downloadable content and  \n**People** are also just articles, but soem of them have to be tagged as an *executive* and they have to stay in a given order.\n\nIn the beginning I wanted to use Markdown as a format to store articles in, but even though I think it's beautiful and very simple format, other people might not be on the same page as me, so I went with [QuillJS](https://quilljs.com/) as a purely WYSIWYG rich text editor. Thanks to it's awesome simplicity and extensibility I was able to modify it so users can select and insert multimedia content they've already uploaded.\n\nContent uploading was an interesting thing to build which I really enjoyed. To make sure all uploaded content is properly tagged I've built a system that detect's file types like images, videos, audio and other documents based not only on the file's extension and a MIME type, but also by detecting file's [magic bytes](https://en.wikipedia.org/wiki/List_of_file_signatures).\n\nAnother thing I enjoyed building was the URL prettyfier since I obviously didn't want to show articles based only their GUID. So for example, when an article's title is `Křehký Hrníček` I wanted it to look like `krehky-hrnicek`. This is done by mapping hundreds of characters to a similarly looking ASCII version. To differentiate between other articles with the same title, I've decided to add a very short hash based on some of the other unique properties of an article like GUID, creation time and an author. I chouse [MurMurHash](https://en.wikipedia.org/wiki/MurmurHash), which is a very fast non-cryptographic function that producing a short but (somewhat) unique hashes. The hash is then converted to Base62, which does not contain `+`, `/` and `=` so the URL looks better.\n\nBecause I wanted to improve my Angular skills - we were supposed to move to Angular at [Alza.cz](https://www.alza.cz) (altohugh we moved to React later) - so Angular was a natural choice at that time.  Today I would choose React I went with [.Net Core](https://dotnet.microsoft.com/) as a backend since it had a decent integration with [Node.js](https://nodejs.org/en/) (and NetCore is love). I chose [MongoDB](https://www.mongodb.com) as a database for a similar reason. To make sure my code runs everywhere I deploy it using [Docker](https://www.docker.com) by Docker and docker-compose scripts.\n\n# Screenshots\n\n![](/images/posts/cetip/1.jpg)\n![](/images/posts/cetip/2.jpg)\n![](/images/posts/cetip/3.jpg)\n![](/images/posts/cetip/4.jpg)\n![](/images/posts/cetip/5.jpg)\n![](/images/posts/cetip/6.jpg)\n![](/images/posts/cetip/7.jpg)\n![](/images/posts/cetip/8.jpg)\n![](/images/posts/cetip/9.jpg)\n![](/images/posts/cetip/10.jpg)\n![](/images/posts/cetip/11.jpg)\n![](/images/posts/cetip/12.jpg)\n![](/images/posts/cetip/13.jpg)\n![](/images/posts/cetip/14.jpg)\n![](/images/posts/cetip/15.jpg)\n![](/images/posts/cetip/16.png)\n\n# What would I do differently\n\nAside from choosing React, I would probably switch also to NodeJS. C# is fantastic, but I feel like with C# I tend to write software that has unnecessarily complex architectures, which is not bad, but it takes more time than it would with other languages. Although I'm happy with the result, I had to make some design (UX/UI) changes thanks to frequent requirements changes, and the logo I designed wasn't used in the end thanks to significant administrative requirements we didn't want to go through."
}