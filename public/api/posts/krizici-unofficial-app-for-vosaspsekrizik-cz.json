{
  "createdAt": "2020-08",
  "title": "Křižíci - Unofficial app for vosaspsekrizik.cz",
  "description": "The first Křižíci Android application",
  "content": "![logo](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/logo.png)\n\n# Křižíci - Unofficial app for vosaspsekrizik.cz\n\n## Background\n\nThis app was the first bigger project I've made. At this time, the app isn't published anymore. My school had timetables and class substitutions, before its complete rework, based around non-standard Excel files and big PDFs. This was painful to use on a computer and even worse on phones. Opening non-standard XLS files (yes, not even XLSX) was painful, sometimes even the official Excel app had problems displaying such file correctly, and the way to download a current version of such file was painful too:\n- Open schools website (non-responsive, few megabytes big)\n- Navigate through the site (through multiple pages) to the download\n- Finally, download the file\n- Open the file and hope for the best\n\nWell, obviously this was nowhere close to optiomal, so I decided to build an app.\n\n## Development\n\nFirst, I started exploring server-less options using multiple Java libraries that would parse the XLS file which on first sight was an excellent idea - but the XLS file used some non-standard (at least not-parseable) elements containing the data. Also, the scheme of the file slightly changed all the time, and with such inconsistency, parsing wasn't an option, even with more sophisticated approaches with other, more advanced libraries that would run on a server - so I went with converting both PDF and XLS to an image.\n\nOn the server side, I chose LibreOffice for converting XLS file to PNG and [ImageMagick's](https://imagemagick.org) `convert` for the PDFs. The script simply downloaded all PDFs and the XLS files, turned them into PNGs which were later optimized using `morgify` and [optipng](http://optipng.sourceforge.net/). Then, everything was copied into [mginx's](https://nginx.org/en/) web directory available to the public. This was repeated every few minutes using cron.\n\nOn the client side, I used a web browser component (the simplest way to show images from the internet with the ability to zoom) to display the image. To make everything fancier, I've added parsing of current events and news from school's site and a countdown to the end of the current class and using ugly hacks and injecting JavaScript into browser component also automated login into grading system [Bakaláři](https://bakalari.cz).\n\n## Technologies\n\n- Android - Java (no other option for Android at that time)\n  - [Apache POI](https://poi.apache.org) - library for working with MS Office documents (although I haven't used it in the end)\n  - [jsoup](https://jsoup.org/) - Java library for parsing HTML\n- Server\n  - [nginx](https://nginx.org/en/) - as a HTTP server\n  - Bash scripting\n  - [LibreOffice](https://www.libreoffice.org/), [ImageMagick](https://imagemagick.org), ...\n\n## Screenshots\n\n![](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/1.jpg)\n![](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/2.jpg)\n![](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/3.jpg)\n![](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/4.jpg)\n![](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/5.jpg)\n![](/images/posts/krizici-unofficial-app-for-vosaspsekrizik-cz/6.jpg)\n\n## What would I do differently\n\nI've used some ugly hacks, especially in the Android code which I'm not proud of, and the whole project was state-of-art bodging. Today I would do many things differently. For example, before converting all files and optimizing them (which wasn't a simple, quick task for my cheap, single-core, 512 MB RAM server), I should've checked if they differ somehow (date, size, hsah, ...). Hardcoding many things was also pretty suboptimal (like lists of classes, teachers and other things) and I should've used cleaner asynchronous code. Well, I've fulfilled myself this wish with the next version of this app."
}